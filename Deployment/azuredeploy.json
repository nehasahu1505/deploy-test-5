{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "botAppID": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The Microsoft Application ID for the bot, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "botAppPassword": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "The Microsoft Application Password for the bot."
      }
    },
    "appName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "Celebrationbot",
      "metadata": {
        "description": "The app name to use for the resources that will be provisioned."
      }
    },
    "appDescription": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "Celebrations Bot is a Teams bot that helps Team members celebrate each others’ birthdays, anniversaries and other recurring events",
      "metadata": {
        "description": "The description for the app."
      }
    },
    "appIconUrl": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "https://raw.githubusercontent.com/OfficeDev/microsoft-teams-celebrations-app/master/Manifest/color.png",
      "metadata": {
        "description": "The link to the icon for the bot. It must resolve to a PNG file."
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "Free",
        "Shared",
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "planSize": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "defaultValue": "1",
      "metadata": {
        "description": "The size of the hosting plan (small, medium, or large)."
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "gitRepoUrl": {
      "type": "string",
      "defaultValue": "https://github.com/OfficeDev/microsoft-teams-celebrations-app.git",
      "metadata": {
        "description": "The URL to the GitHub repository to deploy."
      }
    },
    "gitBranch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "The branch of the GitHub repository to deploy."
      }
    },
    "authUrl": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "https://login.microsoftonline.com/botframework.com/oauth2/v2.0/token",
      "metadata": {
        "description": "The url to authenticate the incoming request."
      }
    },
    "eventNotificationEndpointName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "EventNotification",
      "metadata": {
        "description": "Name of the end point that contains the logic to notify the team members about special events of team members."
      }
    },
    "previewEndpointName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "Preview",
      "metadata": {
        "description": "Name of the end point that contains the logic to send the reminder about upcoming events."
      }
    },
    "reliableDeliveryEndpointName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "ReliableMessageDelivery",
      "metadata": {
        "description": "Name of the end point that contains the logic to reliable delivery of events."
      }
    }

  },
  "variables": {
    "baseResourceName": "[toLower(parameters('appName'))]",
    "botDisplayName": "[parameters('appName')]",
    "botUniqueName": "[concat(variables('baseResourceName'), '-', uniqueString(resourceGroup().id))]",
    "appServiceName": "[concat(variables('baseResourceName'), '-', uniqueString(resourceGroup().id))]",
    "cosmosDbName": "[concat(variables('baseResourceName'), '-storage-', uniqueString(resourceGroup().id))]",
    "functionAppName": "[concat(variables('baseResourceName'), '-functionapp-', uniqueString(resourceGroup().id))]",
    "appInsightsName": "[variables('baseResourceName')]",
    "appHostingPlanName": "[variables('baseResourceName')]",
    "storageAccountName": "[uniquestring(concat(resourceGroup().id, variables('baseResourceName')))]",
    "sharedSkus": [ "Free", "Shared" ],
    "isSharedPlan": "[contains(variables('sharedSkus'), parameters('sku'))]",
    "skuFamily": "[if(equals(parameters('sku'), 'Shared'), 'D', take(parameters('sku'), 1))]",
    "skuName": "[if(variables('isSharedPlan'), concat(variables('skuFamily'),'1'), concat(variables('skuFamily'), parameters('planSize')))]",
    "skuSize": "[concat(variables('skuFamily'), parameters('planSize'))]",
    "appServiceBaseDomain": "[concat(variables('appServiceName'), '.azurewebsites.net')]",
    "appServiceBaseUrl": "[concat('https://', variables('appServiceBaseDomain'))]",
    "botMessagingUrl": "[concat(variables('appServiceBaseUrl'), '/api/messages')]",
    "clientScope": "[concat(parameters('appName'),'/.default')]",
    "controllerBaseUrl": "[concat('https://',variables('appServiceName'),'.azurewebsites.net/')]",
    "manifestAppId": "5c0b8ee0-d445-409b-9c19-ab9edc07a314",
    "timeToPostCelebration": "10:00:00",
    "deepLinkToTab": "https://teams.microsoft.com/l/entity",
    "noOfDaysInAdvanceToNotifyForUpcomingEvents": "3"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2018-02-01",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "name": "[variables('botUniqueName')]",
      "type": "Microsoft.BotService/botServices",
      "location": "global",
      "apiVersion": "2018-07-12",
      "tags": {},
      "sku": {
        "name": "F0"
      },
      "kind": "sdk",
      "properties": {
        "displayName": "[variables('botDisplayName')]",
        "description": "[parameters('appDescription')]",
        "endpoint": "[variables('botMessagingUrl')]",
        "iconUrl": "[parameters('appIconUrl')]",
        "msaAppId": "[parameters('botAppID')]",
        "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "resources": [
        {
          "name": "[concat(variables('botUniqueName'), '/MsTeamsChannel')]",
          "type": "Microsoft.BotService/botServices/channels",
          "apiVersion": "2018-07-12",
          "location": "global",
          "tags": {},
          "sku": {
            "name": "F0"
          },
          "properties": {
            "channelName": "MsTeamsChannel",
            "location": "global",
            "properties": {
              "isEnabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.BotService/botServices/', variables('botUniqueName'))]"
          ]
        }
      ]
    },
    {
      "name": "[variables('cosmosDbName')]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2015-04-08",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "scale": null,
      "properties": {
        "ipRangeFilter": "",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": true,
        "isVirtualNetworkFilterEnabled": false,
        "virtualNetworkRules": [],
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxIntervalInSeconds": 5,
          "maxStalenessPrefix": 100
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "provisioningState": "Succeeded",
            "failoverPriority": 0
          }
        ],
        "capabilities": []
      },
      "tags": {
        "defaultExperience": "Core (SQL)"
      }
    },

    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2016-09-01",
      "name": "[variables('appHostingPlanName')]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[variables('appHostingPlanName')]",
        "hostingEnvironment": "",
        "numberOfWorkers": 1
      },
      "sku": {
        "name": "[variables('skuName')]",
        "tier": "[parameters('sku')]",
        "size": "[variables('skuSize')]",
        "family": "[variables('skuFamily')]",
        "capacity": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "kind": "app",
      "name": "[variables('appServiceName')]",
      "apiVersion": "2016-08-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "enabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('appHostingPlanName'))]",
        "reserved": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "MicrosoftAppId",
              "value": "[parameters('botAppID')]"
            },
            {
              "name": "MicrosoftAppPassword",
              "value": "[parameters('botAppPassword')]"
            },
            {
              "name": "CosmosDBEndpointUrl",
              "value": "[reference(concat('Microsoft.DocumentDb/databaseAccounts/', variables('cosmosDbName'))).documentEndpoint]"
            },
            {
              "name": "CosmosDBKey",
              "value": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/', variables('cosmosDbName')), '2015-04-08').primaryMasterKey]"
            },
            {
              "name": "BotDisplayName",
              "value": "[variables('botDisplayName')]"
            },
            {
              "name": "ApplicationInsightsInstrumentationKey",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "ManifestAppId",
              "value": "[variables('manifestAppId')]"
            },
            {
              "name": "AppBaseDomain",
              "value": "[variables('appServiceBaseDomain')]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "8.9.4"
            },
            {
              "name": "TimeToPostCelebration",
              "value": "[variables('timeToPostCelebration')]"
            },
            {
              "name": "DeepLinkToTab",
              "value": "[variables('deepLinkToTab')]"
            },
            {
              "name": "NoOfDaysInAdvanceToNotifyForUpcomingEvents",
              "value": "[variables('noOfDaysInAdvanceToNotifyForUpcomingEvents')]"
            }

          ]
        },
        "scmSiteAlsoStopped": "false",
        "scmType": "ExternalGit",
        "hostingEnvironmentProfile": null,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "cloningInfo": null,
        "httpsOnly": false
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('appHostingPlanName'))]"
      ],
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "condition": "[not(empty(parameters('gitRepoUrl')))]",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('appServiceName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('gitRepoUrl')]",
            "branch": "[parameters('gitBranch')]",
            "IsManualIntegration": true
          }
        }
      ]
    },
    {
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "kind": "other",
      "apiVersion": "2015-05-01",
      "location": "[parameters('location')]",
      "tags": {},
      "scale": null,
      "properties": {
        "Application_Type": "other"
      },
      "dependsOn": []
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appHostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "appSettings": [
            {
              "name": "PROJECT",
              "value": ""
            },
            {
              "name": "SITE_ROLE",
              "value": "function"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "MaxNumberOfAttempts",
              "value": "30"
            },
            {
              "name": "MicrosoftAppId",
              "value": "[parameters('botAppID')]"
            },
            {
              "name": "MicrosoftAppPassword",
              "value": "[parameters('botAppPassword')]"
            },
            {
              "name": "StorageAccountConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "AUTH_URL",
              "value": "[parameters('authUrl')]"
            },
            {
              "name": "CLIENT_ID",
              "value": "[parameters('botAppID')]"
            },
            {
              "name": "CLIENT_SECRET",
              "value": "[parameters('botAppPassword')]"
            },
            {
              "name": "CLIENT_SCOPE",
              "value": "[variables('clientScope')]"
            },
            {
              "name": "CONTROLLER_BASE_URL",
              "value": "[variables('controllerBaseUrl')]"
            },
            {
              "name": "PREVIEW_END_POINT_NAME",
              "value": "[parameters('previewEndpointName')]"
            },
            {
              "name": "EVENT_NOTIFICATION_END_POINT_NAME",
              "value": "[parameters('eventNotificationEndpointName')]"
            },
            {
              "name": "RELIABLE_DELIVERY_END_POINT_NAME",
              "value": "[parameters('reliableDeliveryEndpointName')]"
            }

          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appHostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "condition": "[not(empty(parameters('gitRepoUrl')))]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('gitRepoUrl')]",
            "branch": "[parameters('gitBranch')]",
            "IsManualIntegration": true
          }
        }
      ]
    }
  ]
}