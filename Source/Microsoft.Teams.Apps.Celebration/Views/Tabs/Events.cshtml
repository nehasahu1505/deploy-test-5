@using Microsoft.Teams.Apps.Celebration.Helpers;
@using Microsoft.Teams.Apps.Celebration.Models;

@{
    Layout = null;
}

@model IEnumerable<CelebrationEvent>

@{
    List<CelebrationEvent> events = Model.AsEnumerable().ToList();
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Events</title>

    @Styles.Render("~/Content//bootstrap-3.4.min.css")
    @Styles.Render("~/Content/tabStyles.css")
    @Styles.Render("~/Content/styles.css")
    @Styles.Render("~/Content/spinner.css")
    @Styles.Render("~/Content/button-themes.css")

    @Scripts.Render("~/Scripts/jquery-3.4.0.min.js")
    @Scripts.Render("~/Scripts/jquery.slimscroll.min.js")
    @Scripts.Render("~/Scripts/microsoftTeams-1.4.1.min.js")
    @Scripts.Render("~/Scripts/bootstrap-3.4.min.js")
    @Scripts.Render("~/Scripts/theme.js")


    <script type="text/javascript">
        var microsoftTeams;
        var eventId;
        var userObjectId;
        var theme;

        microsoftTeams.initialize();

        var catchTheme = function (teamsTheme) {
            theme = teamsTheme;
            setTheme(theme, "eventsView");
        };
        microsoftTeams.registerOnThemeChangeHandler(catchTheme);


        submitHandler = function (err, result) {
             if (result) {
                 $("#loader").show();
                 $("#disablingDiv").show();
                 if (result.Action === "Delete") {
                     deleteEvent(result.EventInfo.Id, result.EventInfo.OwnerAadObjectId)
                 } else if (result.Action === "Save") {
                     saveEvent(result.EventInfo);
                 }
            }
         };

        function saveEvent(eventInfo) {
            let requestUrl = (eventInfo["Id"]) ? "/Tabs/UpdateEvent" : "/Tabs/SaveEvent";
            $.ajax({
                url: requestUrl,
                type: "Post",
                data: JSON.stringify(eventInfo),
                dataType: "text",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                   // window.location = window.location.origin + "/Tabs/Events?userObjectId=" + eventInfo["OwnerAadObjectId"];
                    $('#events-tab-body').html(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    //TODO: Handle error.
                },
                complete: function () {
                    $("#loader").hide();
                    $("#disablingDiv").hide();
                },
            });
        }

        function newEventButtonClick() {
            handleAddingNewEvent();
        }

        function newEventTileClick() {
            handleAddingNewEvent();
        }

        function handleAddingNewEvent() {
            var requestUrl = "/Tabs/GetTotalEventCountOfUser?userObjectId=" + userObjectId;
            $.get(requestUrl, function (data) {
                var count = Number(data);
                if (count < 5) {
                    openTaskModule();
                } else {
                    $('#newEventErrorStateModal').modal('show');
                }
            });
        }

        function openTaskModule(eventId) {
            var url = "@(ApplicationSettings.BaseUrl)" + "/Tabs/ManageEvents?userObjectId=" + userObjectId;
            var title = "Add event"
            if (eventId != null) {
                url = url + "&eventId=" + eventId;
                title = "Edit event"
            }

            var taskInfo = {
                title: title,
		        height: "660px", // 770px
		        width: "600px",
                url: url
            };

            taskInfo.url = taskInfo.url + "&clientTimeZone=" + Intl.DateTimeFormat().resolvedOptions().timeZone + "&theme=" + theme;
            taskInfo.fallbackUrl = taskInfo.url;
            microsoftTeams.tasks.startTask(taskInfo, submitHandler);
        }

        function deleteEvent(eventId, userAadObjectId) {
            $("#loader").show();
            $("#disablingDiv").show();
            let requestUrl = "/Tabs/DeleteEvent?userObjectId=" + userAadObjectId + "&eventId=" + eventId ;
            $.ajax({
                url: requestUrl,
                type: "Post",
                dataType: "text",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $('#events-tab-body').html(data);
                   // window.location = window.location.origin + "/Tabs/EventsData?userObjectId=" + userAadObjectId;
                },
                error: function (xhr, ajaxOptions, thrownError) {

                    //TODO: Handle error.
                },
                complete: function () {
                    $("#loader").hide();
                    $("#disablingDiv").hide();
                },
            });
        }

        $(document).ready(function () {
            $(".event-tile-dropdown").click(function (e) {
                e.stopPropagation();
                $(".dropdown-menu").hide();
                $(this).find('ul').show();
            });

            $(".dropdown-menu").click(function (e) {
                e.stopPropagation();
                $(".dropdown-menu").hide();
            });
        });

        $('.scrollbar-dynamic').slimScroll({
            height: '99%'
        });

        $(window).on("load", function () {
            microsoftTeams.getContext(function (context) {
                userObjectId = context["userObjectId"];
                theme = context["theme"];
                setTheme(theme, "eventsView");
                if (document.referrer.includes("https://teams.microsoft.com/")) {

                    var eventId = context["subEntityId"];
                    if (eventId) {
                        var requestUrl = "/Tabs/CheckIfEventExist?eventId=" + eventId + "&ownerAadObjectId=" + userObjectId;
                        $.get(requestUrl, function (data) {
                            if (data === "OK") {
                                openTaskModule(eventId);
                            }
                        });
                    }
                }
            });
        });

        $(document).click(function () {
            $(".dropdown-menu").hide();
        });
    </script>
</head>
<body id="eventsView" class="theme-default">
    <div id="loader" style="display: none;" class="loading">
        @Html.Partial("~/Views/Shared/_Spinner.cshtml")
    </div>

    <div id="disablingDiv"></div>

    <div id="events-tab-body" data-url='@Url.Action("EventsData")' class="scrollbar-dynamic">
        @if (ViewBag.EmptyView == false)
        {
            if (events.Count == 0)
            {
                // Empty state div
                <div id="divEmptyStateforTab" class="empty-state-div">
                    <div id="emptyEvent">
                        <div>
                            <img src="../../Content/Images/empty-state-celebrations.png" class="empty-event-image" />
                        </div>
                        <div class="empty-event-header">
                            Start celebrating!
                        </div>
                        <div class="empty-event-regular-text">
                            Share a special occasion with your team
                        </div>
                        <div class="new-event-button">
                            <button class="ts-btn ts-btn-primary" onclick="newEventButtonClick()">New event</button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                // Represents events in the form of tiles.
                <div id="eventList">

                    @foreach (var celebrationEvent in Model)
                    {
                        <div class="event-tile" id="event" onclick='openTaskModule("@celebrationEvent.Id")'>
                            <div class="event-tile-date">
                                @celebrationEvent.Date.ToString("MMMM dd")
                            </div>
                            <div class="dropdown event-tile-dropdown">
                                <button class="ts-btn ts-sym app-icons-fill-hover inset-border inset-border-round inset-border-themed more-button" type="button" data-toggle="dropdown" id="eventTileDropdownButton">
                                    <svg viewBox="0 0 32 32" role="presentation" class="app-svg icons-more app-bar-extra-icons-fill-colors svg-moreicon-margin" focusable="false">
                                        <g class="icons-default-fill">
                                            <circle class="icons-filled" cx="22" cy="11" r="2"></circle>
                                            <circle class="icons-filled" cx="16" cy="11" r="2"></circle>
                                            <circle class="icons-filled" cx="10" cy="11" r="2"></circle>
                                            <circle class="icons-unfilled" cx="22" cy="11" r="1.5"></circle>
                                            <circle class="icons-unfilled" cx="16" cy="11" r="1.5"></circle>
                                            <circle class="icons-unfilled" cx="10" cy="11" r="1.5"></circle>
                                        </g>
                                    </svg>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a href="#" onclick='openTaskModule("@celebrationEvent.Id")'> Edit </a></li>
                                    <li><a href="#" onclick='deleteEvent("@celebrationEvent.Id", "@celebrationEvent.OwnerAadObjectId")'> Delete </a></li>
                                </ul>
                            </div>
                            <div class="event-tile-title">
                                @celebrationEvent.Title
                            </div>

                            <div class="event-tile-celebration-image-div">
                                <img src="@celebrationEvent.ImageURL" alt="" />
                            </div>

                            <div class="event-tile-message-header">
                                Message
                            </div>
                            <div class="event-tile-message">
                                @celebrationEvent.Message
                            </div>
                        </div>
                    }

                    @if (events.Count < Constant.MaxEventCountPerUser)
                    {
                        for (int i = 0; i < Constant.MaxEventCountPerUser - events.Count; i++)
                        {
                            // New event tile. It allows user to add new event.
                            <div class="event-tile" id="newEventTile" onclick="newEventTileClick();">
                                <div class="event-tile-date ghost-tile-text">
                                    Date
                                </div>
                                <div class="event-tile-title ghost-tile-text">
                                    Event title
                                </div>
                                <div class="event-tile-celebration-image-div">
                                    <img src="../../Content/Images/Celebrations-bot-image-new-event.jpg" alt="" />
                                </div>
                                <div class="event-tile-message-header ghost-tile-text">
                                    Message
                                </div>
                                <div class="event-tile-message ghost-tile-text">
                                    Say something about your event.
                                </div>
                            </div>

                        }

                    }

                    @if (events.Count >= Constant.MaxEventCountPerUser)
                    {
                        <div class="event-exhaust-limit">
                            I’ve reached the maximum number of events I can keep track of right now. If you want to add something new, delete an older one to make room.
                        </div>
                    }
                </div>
            }
        }
    </div>

    <div class="modal fade" id="newEventErrorStateModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <span class="modal-title bold-header">My memory bank is stuffed!</span>
                    <button type="button" class="close app-icons-fill-hover" data-dismiss="modal" aria-label="Close" title="close">
                        <svg role="presentation" focusable="false" class="app-svg icons-close" viewBox="0 0 32 32">
                            <g class="icons-default-fill">
                                <path class="icons-unfilled" d="M16.707,16l4.2427-4.2427c0.1953-0.1953,0.1953-0.5117,0-0.707s-0.5117-0.1953-0.707,0L16,15.293l-4.2427-4.2427
	                                c-0.1953-0.1953-0.5117-0.1953-0.707,0s-0.1953,0.5117,0,0.707L15.293,16l-4.2427,4.2427c-0.1953,0.1953-0.1953,0.5117,0,0.707
	                                c0.0977,0.0977,0.2256,0.1465,0.3535,0.1465s0.2559-0.0488,0.3535-0.1465L16,16.707l4.2427,4.2427
	                                c0.0977,0.0977,0.2256,0.1465,0.3535,0.1465s0.2559-0.0488,0.3535-0.1465c0.1953-0.1953,0.1953-0.5117,0-0.707L16.707,16z"></path>
                                <path class="icons-filled" d="M17.4141,16l3.8892-3.8892c0.3906-0.3906,0.3906-1.0234,0-1.4141c-0.3901-0.3906-1.0239-0.3906-1.4141,0L16,14.5859
	                                l-3.8892-3.8892c-0.3901-0.3906-1.0239-0.3906-1.4141,0c-0.3906,0.3906-0.3906,1.0234,0,1.4141L14.5859,16l-3.8892,3.8892
	                                c-0.3906,0.3906-0.3906,1.0234,0,1.4141c0.1951,0.1953,0.4512,0.293,0.707,0.293s0.512-0.0977,0.707-0.293L16,17.4141l3.8892,3.8892
	                                c0.1951,0.1953,0.4512,0.293,0.707,0.293s0.512-0.0977,0.707-0.293c0.3906-0.3906,0.3906-1.0234,0-1.4141L17.4141,16z"></path>
                            </g>
                        </svg>
                    </button>
                </div>
                <div class="modal-body">
                    <span>I’ve reached the maximum number of events I can keep track of right now. If you want to add something new, delete an older one to make room.</span>
                </div>
                <div class="modal-footer">
                    <button type="button" class="ts-btn ts-btn-primary got-it" data-dismiss="modal">Got it</button>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript">
        $('#loader').show();

        var getEvents = function () {
            $.ajax({
                url: $('#events-tab-body').data('url') + "?userObjectId=" +"@ViewBag.userObjectId",
                type: 'POST',

                success: function (result) {
                    $('#events-tab-body').html(result);

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $('#events-tab-body').html("Some error occurred");
                },
                complete: function () {
                    $("#loader").hide();
                }
            });
        };

         @if (ViewBag.EmptyView == true)
         {
            @: getEvents();
         }

    </script>
</body>
</html>
